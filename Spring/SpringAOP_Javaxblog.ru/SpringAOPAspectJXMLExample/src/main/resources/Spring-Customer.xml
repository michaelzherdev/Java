<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:aop="http://www.springframework.org/schema/aop"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
	http://www.springframework.org/schema/beans/spring-beans-3.0.xsd 
	http://www.springframework.org/schema/aop 
	http://www.springframework.org/schema/aop/spring-aop-3.0.xsd ">

	<aop:aspectj-autoproxy />

	<bean id="customerService" class="ru.javaxblog.customer.services.CustomerService" />

	<!-- Aspect -->
	<bean id="customerAspect" class="ru.javaxblog.aspect.CustomerAspect" />

	<aop:config>

		<aop:aspect id="aspectLog" ref="customerAspect" >

			<!-- @Before -->
			<aop:pointcut id="pointCutBefore"
				expression="execution(* ru.javaxblog.customer.services.CustomerService.addCustomer(..))" />

			<aop:before method="logBefore" pointcut-ref="pointCutBefore" />
			
			<!-- @After -->
			<aop:pointcut id="pointCutAfter"
				expression="execution(* ru.javaxblog.customer.services.CustomerService.addCustomer(..))" />

			<aop:after method="logAfter" pointcut-ref="pointCutAfter" />
			
			<!-- @AfterReturning -->
			<aop:pointcut id="pointCutAfterReturning"
				expression="execution(* ru.javaxblog.customer.services.CustomerService.addCustomerReturnValue(..))" />

			<aop:after-returning method="logAfterReturning" returning="result" 
				pointcut-ref="pointCutAfterReturning" />
			
			
			<!-- @AfterThrowing -->
			<aop:pointcut id="pointCutAfterThrowing"
				expression="execution(* ru.javaxblog.customer.services.CustomerService.addCustomerThrowException(..))" />
			
			<aop:after-throwing method="logAfterThrowing" throwing="error" 
				pointcut-ref="pointCutAfterThrowing"  />
			
			
			<!-- @Around -->
			<aop:pointcut id="pointCutAround"
				expression="execution(* ru.javaxblog.customer.services.CustomerService.addCustomerAround(..))" />
			
			<aop:around method="logAround" pointcut-ref="pointCutAround"  />
			
		</aop:aspect>

	</aop:config>


</beans>